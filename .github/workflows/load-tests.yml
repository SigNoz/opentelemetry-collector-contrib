name: load-tests
on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      loadtest_matrix: ${{ steps.splitloadtest.outputs.loadtest_matrix }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2.2.0
        with:
          go-version: 1.17
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Go
        id: module-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-tool-binaries
        with:
          path: /home/runner/go/bin
          key: v1-tools-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - name: Install dependencies
        if: steps.module-cache.outputs.hit != 'true'
        run: make gomoddownload
      - name: Install Tools
        if: steps.tool-cache.outputs.cache-hit != 'true'
        run: make install-tools
      - run: make otelcontribcol
      - name: Upload Collector Binaries
        uses: actions/upload-artifact@v2
        with:
          name: collector-binaries
          path: ./bin/*
      - name: Split Loadtest Jobs
        id: splitloadtest
        run: ./.github/workflows/scripts/setup_e2e_tests.sh

  loadtest:
    runs-on: ubuntu-latest
    needs: [setup-environment]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-environment.outputs.loadtest_matrix) }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Cache Tools
        id: tool-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-tool-binaries
        with:
          path: /home/runner/go/bin
          key: v1-tools-${{ runner.os }}-${{ hashFiles('./internal/tools/go.mod') }}
      - run: sudo chmod 0777 -R /opt
      - name: Fluentbit Cache
        id: fluentbit-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-fluentbit
        with:
          path: /opt/td-agent-bit
          key: fluentbit-cache-1.5.3
      - run: sudo ln -s /opt/td-agent-bit/bin/td-agent-bit /usr/local/bin/fluent-bit
      - name: Install fluentbit
        if: steps.fluentbit-cache.outputs.cache-hit != 'true'
        run: |
          wget https://packages.fluentbit.io/ubuntu/bionic/pool/main/t/td-agent-bit/td-agent-bit_1.5.3_amd64.deb
          sudo dpkg -i ./td-agent-bit*.deb
      - name: Setup Go
        uses: actions/setup-go@v2.2.0
        with:
          go-version: 1.17
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Go
        id: module-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
      - run: mkdir -p results && touch results/TESTRESULTS.md
      - name: Download Collector Binaries
        uses: actions/download-artifact@v2
        with:
          name: collector-binaries
          path: bin/
      - run: chmod +x bin/*
      - name: Loadtest
        run: make -C testbed run-tests 
        env:
          TEST_ARGS: "-test.run=${{ matrix.test }}"
      - name: Set results filename
        id: filename
        run: echo "::set-output name=name::$(echo '${{ matrix.test }}' | sed -e 's/|/_/g')"
      - name: Create Test Result Archive
        if: ${{ failure() || success() }}
        continue-on-error: true
        run: tar -cvf test_results_${{steps.filename.outputs.name}}.tar testbed/tests/results
      - name: Upload Test Results
        if: ${{ failure() || success() }}
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          path: ./*.tar
      - name: GitHub Issue Generator
        if: ${{ failure() && github.ref == 'ref/head/main' }}
        run: issuegenerator $TEST_RESULTS
