receivers:
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: "localhost:12345"
  otlp:
    protocols:
      grpc:
      http:
  jaeger:
    protocols:
      grpc:
      thrift_http:
  # hostmetrics:
  #   collection_interval: 10s
  #   scrapers:
  #     load:
  #     memory:
  # redis:
  #   endpoint: "localhost:6379"
  #   service_name: "my-test-redis"
  #   collection_interval: 10s
  #   # password: $REDIS_PASSWORD
processors:
  resourcedetection:
    detectors: [env, system]
    timeout: 2s
    override: false
  signozspanmetrics:
    metrics_exporter: clickhousemetricswrite
  signozspanmetrics/prometheus:
    metrics_exporter: prometheus
  batch:
    send_batch_size: 1000
    timeout: 1s
  # memory_limiter:
  #   # Same as --mem-ballast-size-mib CLI argument
  #   ballast_size_mib: 683
  #   # 80% of maximum memory up to 2G
  #   limit_mib: 1500
  #   # 25% of limit up to 2G
  #   spike_limit_mib: 512
  #   check_interval: 5s
  # queued_retry:
  #   num_workers: 4
  #   queue_size: 100
  #   retry_on_failure: true
extensions:
  health_check: {}
  zpages: {}
exporters:
  prometheus:
    endpoint: "127.0.0.1:8889"
    resource_to_telemetry_conversion:
      enabled: true
  clickhousetraces:
    datasource: http://stagingapp.signoz.io:9000/?database=signoz_traces
    migrations: ../../exporter/clickhousetracesexporter/migrations
  clickhousemetricswrite:
    endpoint: http://stagingapp.signoz.io:9000/?database=signoz_metrics
    resource_to_telemetry_conversion:
      enabled: true

service:
  extensions: [health_check, zpages]
  pipelines:
    traces:
      receivers: [jaeger, otlp]
      processors: [signozspanmetrics/prometheus, batch]
      exporters: [clickhousetraces]
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [clickhousemetricswrite]
    metrics/spanmetrics:
      receivers: [otlp/spanmetrics]
      exporters: [prometheus]